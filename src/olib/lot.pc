/*-------------------------------------------------------------------------*
 *  Source Code:    %M%
 *-------------------------------------------------------------------------*
 *  Version:        %I%
 *  Version Date:   %G% - %U%
 *  Source Date:    %H% - %T%
 *
 *  Description:    Lot File Subroutines.
 *
 *-------------------------------------------------------------------------*
 *                            Revision history                             |
 *-------------+-----------------------------------------------------------*
 * Change Date |            Author & Description                           |
 *-------------+-----------------------------------------------------------*
 *  10/07/95   |  tjt  Original implementation.
 *-------------------------------------------------------------------------*/
static char lot_ec[] = "%Z% %M% %I% (%G% - %U%)";

EXEC SQL INCLUDE SQLCA;

#define SQLNOTFOUND 1403 

struct lt_item
{
   long  lt_time;
   short lt_pl;
   char  lt_sku[15];
   char  lt_number[15];
};
struct lt_item2
{
   long  lt_time;
   short lt_pl;
   char  lt_sku[16];
   char  lt_number[16];
};

struct lt_item lt_lo, lt_hi;

long lot_fd         = 0;
long lot_open_mode  = 0;
long lot_key        = 0;
long lot_count      = 0;
long lot_last       = 0;
long lot_has_cursor = -1;

EXEC SQL BEGIN DECLARE SECTION;

SQL_CURSOR lot_cursor1;                  /* pl + sku + time  */

EXEC SQL END DECLARE SECTION;

/*-------------------------------------------------------------------------*
 *  Open Database
 *-------------------------------------------------------------------------*/
lot_open_o(mode)
register long mode;
{
  lot_fd = 1;

  lot_open_mode  = mode;
  lot_key        = 0; 
  lot_count      = 0;
  lot_last       = 0;
  lot_has_cursor = -1;
  lot_setkey_o(0);
  return 0;
}
/*-------------------------------------------------------------------------*
 *  Close Database
 *-------------------------------------------------------------------------*/
lot_close_o()
{
  if (lot_has_cursor >= 0) lot_close_cursor();

  lot_fd = 0;
  return 0;
}
/*-------------------------------------------------------------------------*
 *  Close Cursor
 *-------------------------------------------------------------------------*/
lot_close_cursor()
{
  if (lot_has_cursor >= 0)
  {
              EXEC SQL CLOSE :lot_cursor1;
              if (sqlca.sqlcode) icrash("lot_close_cursor 1");
  }
  lot_has_cursor = -1;
  return 0;
}
/*-------------------------------------------------------------------------*
 *  Set Database Access Key
 *-------------------------------------------------------------------------*/
lot_setkey_o(n)
register long n;
{
  if (lot_has_cursor >= 0) lot_close_cursor();

  lot_key   = 1;
  lot_count = 0;

  lt_lo.lt_time = 0;
  lt_lo.lt_pl   = 1;
  memset(lt_lo.lt_sku, 0x20, 15);
  
  lt_hi.lt_time = 0x7fffffff;
  lt_hi.lt_pl   = 0x7fff;
  memset(lt_hi.lt_sku, 'z', 15);
      
  return 0;
}
/*-------------------------------------------------------------------------*
 *  Starting Key For Database Search
 *-------------------------------------------------------------------------*/
lot_startkey_o(p)
struct lt_item *p;
{
  if (lot_has_cursor >= 0) lot_close_cursor();

  lot_key   = 1;
  lot_count = 0;
  lot_last  = 0;
  
  memcpy(&lt_lo, p, sizeof(struct lt_item));
  memcpy(&lt_hi, p, sizeof(struct lt_item));

  return 0;
}
/*-------------------------------------------------------------------------*
 *  Ending Key For Database Search
 *-------------------------------------------------------------------------*/
lot_stopkey_o(p)
struct lt_item *p;
{
  memcpy(&lt_hi, p, sizeof(struct lt_item));

  return 0;
}
/*-------------------------------------------------------------------------*
 *  Read Database Row
 *-------------------------------------------------------------------------*/
lot_read_o(p, mode)
register struct lt_item *p;
register long mode;
{
  lot_startkey_o(p);
  lot_stopkey_o(p);
  return lot_next_o(p, mode);
}
/*-------------------------------------------------------------------------*
 *  Fetch Next Database Row
 *-------------------------------------------------------------------------*/
lot_next_o(p, mode)
register struct lt_item *p;
register long mode;
{  
  switch (lot_key)
  {
    case 1:  return lot_next1(p);
  }
  return 1;
}
/*-------------------------------------------------------------------------*
 *  Fetch Next Database Row On Pickline, SKU, and Time For Update
 *-------------------------------------------------------------------------*/
lot_next1(p)
register struct lt_item *p;
{  
  struct lt_item2 work;
  char l_lot_sku[16];
  int  l_lot_pl; 
  if (!lot_count)
  {
    if (lot_has_cursor >= 0) lot_close_cursor();

    EXEC SQL ALLOCATE :lot_cursor1;
    l_lot_pl=lt_lo.lt_pl;
    memcpy(l_lot_sku,lt_lo.lt_sku,15);
    l_lot_sku[15]='\0';

    EXEC SQL EXECUTE
    begin
      lot_retrieve.open_cur(:lot_cursor1,:l_lot_pl,:l_lot_sku);
    end;
    END-EXEC;

    if (sqlca.sqlcode) icrash("lot_open_cursor 1");

    lot_has_cursor = lot_key;
  
  }
  lot_last = 0;
  
  EXEC SQL FETCH :lot_cursor1 INTO :work;
  
  if (sqlca.sqlcode == 0)
  {
    lot_count += 1;
    lot_last   = 1;
    
    p->lt_time = work.lt_time;
    p->lt_pl   = work.lt_pl;
    
    memcpy(p->lt_sku, work.lt_sku, 15);
    memcpy(p->lt_number, work.lt_number, 15);
    
    return 0;
  }
  else if (sqlca.sqlcode == SQLNOTFOUND) return 1;
  icrash("lot_next1 fetch");
}
/*-------------------------------------------------------------------------*
 *  Insert Database Row
 *-------------------------------------------------------------------------*/
lot_write_o(p)
register struct lt_item *p;
{
  struct lt_item2 work;

  work.lt_time = p->lt_time;
  work.lt_pl   = p->lt_pl;
  memcpy(work.lt_sku, p->lt_sku, 15);
  work.lt_sku[15]='\0';
  memcpy(work.lt_number, p->lt_number, 15);
  work.lt_number[15]='\0';

  
  work.lt_time = time(0);
  
  EXEC SQL INSERT INTO lot (lot_time,lot_pl,lot_sku,lot_number)
    VALUES (:work.lt_time,:work.lt_pl,:work.lt_sku,:work.lt_number);

  if (sqlca.sqlcode) icrash("lot_write");
  return 0;
}
/*-------------------------------------------------------------------------*
 *  Update Database
 *-------------------------------------------------------------------------*/
lot_update_o(p)
register struct lt_item *p;
{
  struct lt_item2 work;

  if (lot_last > 0)
  {
    work.lt_time = p->lt_time;
    work.lt_pl   = p->lt_pl;
    memcpy(work.lt_sku, p->lt_sku, 15);
    memcpy(work.lt_number, p->lt_number, 15);
    work.lt_sku[15]='\0';
    work.lt_number[15]='\0';

    EXEC SQL UPDATE lot 
    SET   lot_time   =  :work.lt_time,
          lot_pl     =  :work.lt_pl,
          lot_sku    =  :work.lt_sku,
          lot_number =  :work.lt_number
    WHERE lot_pl     =  :work.lt_pl
    AND   lot_time   =  :work.lt_time
    AND   lot_sku    =  :work.lt_sku;

    lot_last = 0;
    
    if (sqlca.sqlcode) icrash("lot_update");
    return 0;
  }
  krash("lot_update", "no active record", 1);
}
/*-------------------------------------------------------------------------*
 *  Delete Database Row
 *-------------------------------------------------------------------------*/
lot_delete_o(p)
struct lt_item *p;
{
   long  l_lt_time;
   short l_lt_pl;
   char  l_lt_sku[16];
  if (lot_last> 0)
  {
    l_lt_time=p->lt_time;
    l_lt_pl=p->lt_pl;
    memcpy(l_lt_sku,p->lt_sku,15);
    l_lt_sku[15]='\0';

    EXEC SQL DELETE FROM lot 
    WHERE lot_pl     =  :l_lt_pl
    AND   lot_time   =  :l_lt_time
    AND   lot_sku    =  :l_lt_sku;
    
    lot_last = 0;
    
    if (sqlca.sqlcode) icrash("lot_delete");
    return 0;
  }
  krash("lot_delete", "no active record", 1);
}
/* end of lot.ec  */
